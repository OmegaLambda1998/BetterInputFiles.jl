var documenterSearchIndex = {"docs":
[{"location":"#InputFiles.jl-Documentation","page":"InputFiles","title":"InputFiles.jl Documentation","text":"","category":"section"},{"location":"","page":"InputFiles","title":"InputFiles","text":"Provides consistent methods to load in input files, such as .toml, .yaml, and .json files. Also extends the functionality of these files, via pre-processing, post-processing, and macros.","category":"page"},{"location":"","page":"InputFiles","title":"InputFiles","text":"Already using in many of my projects, including IABCosmo.jl, SALTJacobian.jl, Supernovae.jl, ShockCooling.jl, and Greed.jl (amongst others).","category":"page"},{"location":"","page":"InputFiles","title":"InputFiles","text":"","category":"page"},{"location":"#Install","page":"InputFiles","title":"Install","text":"","category":"section"},{"location":"","page":"InputFiles","title":"InputFiles","text":"using Pkg\nPkg.add(\"InputFiles\")","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"CurrentModule = InputFiles.SetupModule","category":"page"},{"location":"setup/#Setup-Functions","page":"Setup functions","title":"Setup Functions","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"The main functionality provided by InputFiles is the ability to consistently setup packages from a .toml file.","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"Pages = [\"setup.md\"]\nDepth = 5","category":"page"},{"location":"setup/#Usage","page":"Setup functions","title":"Usage","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"Most of my packages use the same boilerplate to setup everything in a way that allows easy access propogation of user provided parameters:","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"using TOML\nusing InputFiles\nusing ArgParse\n\nfunction get_args()\n    s = ArgParseSettings()\n    @add_arg_table s begin\n        \"--verbose\", \"-v\"\n            help = \"Increase level of logging verbosity\"\n            action = :store_true\n        \"input\"\n            help = \"Path to .toml file\"\n            required = true\n    end\n    return parse_args(s)\nend\n\nfunction main()\n    args = get_args()\n    verbose = args[\"verbose\"]\n    toml_path = args[\"input\"]\n    toml = TOML.parsefile(abspath(toml_path))\n    setup_global!(toml, verbose, toml_path)\n    @debug \"Read in $toml_path\"\n    run_MyPackage(toml) # Actually run everything with the prepared `toml`\nend","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"Given a .toml file, this will produce a dictionary with a global key containing a dictionary with","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"toml_path: The path to the .toml input file\nbase_path: A base path defined relative to toml_path from which any relative paths used by the package will be relative to\noutput_path: The output directory where all output, including logging, will be put\nlogging: Whether logging was set up. This allows you to use my InputFiles logging function or your own\nlog_file: If using my logging function, then in addition to stdout, logs will be saved to log_file","category":"page"},{"location":"setup/#Global-Options","page":"Setup functions","title":"Global Options","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"You can change much of the behaviour of InputFiles setup logic both in how you call it, and in global options in the input .toml file.","category":"page"},{"location":"setup/#Toml-Options","page":"Setup functions","title":"Toml Options","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"Much of the behaviour can be controlled from the .toml file itself, without needed to change any code.","category":"page"},{"location":"setup/#Change-default-paths","page":"Setup functions","title":"Change default paths","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"By default, InputFiles sets base_path equal to toml_path, and output_path equal to base_path/Output. By defining your own (absolute or relative) base_path, and output_path, you can change these defaults. Note that base_path is defined relative to toml_path, and output_path is defined relative to base_path, but absolute paths are respected.","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"[ global ]\n    base_path = \"../Examples\"\n    # base_path = toml_path/../Examples\n    output_path = \"/tmp/test\"\n    # output_path = \"/tmp/test\"","category":"page"},{"location":"setup/#Change-logging-behaviour","page":"Setup functions","title":"Change logging behaviour","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"You can define in the .toml file, whether you want to use InputFiles logging or not. Additionally you can specify a new location for the log file (defaults to output_path/log.txt). This can be either absolute, or relative to output_path","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"[ global ]\n    logging = false\n    log_file = logs/out.txt\n    # log_file = output_path/logs/out.txt","category":"page"},{"location":"setup/#InputFiles-Options","page":"Setup functions","title":"InputFiles Options","text":"","category":"section"},{"location":"setup/#Add-new-global-paths","page":"Setup functions","title":"Add new global paths","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"By defining a Dict of paths, you can add new global paths, which can be accessed throughout the package. The following creates data_path relative to base_path, and filter_path relative to data_path. You must provide defaults for these paths but the user can overwrite then in the .toml (see Change default paths).","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"paths = Dict(\n    \"data_path\" => (\"base_path\", \"Data\")\n    \"filter_path\" => (\"data_path\", \"Filters\")\n\nsetup_global!(toml, toml_path, paths)","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"See default_paths for more details.","category":"page"},{"location":"setup/#API","page":"Setup functions","title":"API","text":"","category":"section"},{"location":"setup/#Public-objects","page":"Setup functions","title":"Public objects","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"These are the functions, types, and other objects you have access to with a simple using InputFiles","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"Modules = [SetupModule]\nPrivate = false","category":"page"},{"location":"setup/#InputFiles.SetupModule.setup_global!","page":"Setup functions","title":"InputFiles.SetupModule.setup_global!","text":"setup_global!(toml::Dict, toml_path::AbstractString, verbose::Bool, paths::OrderedDict{String, Tuple{String, String}}=OrderedDict{String, Tuple{String, String}}(), log_path::String=\"output_path\"; test::Bool=false)\n\nSetup the \"global\" information of toml, including paths and logging.\n\nArguments\n\ntoml::Dict: The toml file loaded into a Dict\ntoml_path::AbstractString: The path to the input .toml file (from which toml is loaded)\nverbose::Bool: Whether or not to display @debug calls\npaths::OrderedDict{String, Tuple{String, String}}: Paths to expand. paths will be merged with the following default_paths, with paths taking preference. See default_paths for a the syntax of paths\noutput_path::String: The \"path_name\" of the directory where logging should output\ntest::Bool: Whether this run is a test or not. This will decide whether to actually create directories, or log anything\n\nSee also setup_paths!, and setup_logging!\n\nExample\n\ntoml = Dict()\ntoml_path = \"/path/to/input/file.toml\"\nsetup_global!(toml, toml_path, false; test=true)\nprintln(toml)\n\n# output\n\nDict{Any, Any}(\"global\" => Dict{Any, Any}(\"toml_path\" => \"/path/to/input\", \"logging\" => false, \"base_path\" => \"/path/to/input/\", \"log_file\" => \"/path/to/input/Output/log.txt\", \"output_path\" => \"/path/to/input/Output\"))\n\n\n\n\n\n","category":"function"},{"location":"setup/#Private-objects","page":"Setup functions","title":"Private objects","text":"","category":"section"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"These are the functions, types, and other objects which you don't have access to by default. They are included here for verbosity and developer assistance.","category":"page"},{"location":"setup/","page":"Setup functions","title":"Setup functions","text":"Modules = [SetupModule]\nPublic = false","category":"page"},{"location":"setup/#InputFiles.SetupModule.default_paths","page":"Setup functions","title":"InputFiles.SetupModule.default_paths","text":"default_paths::OrderedDict{String, Tuple{String, String}}\n\nThe default paths which will be expanded into absolute paths and used throughout the project.\n\ndefault_paths::OrderedDict{String, Tuple{String, String}} = OrderedDict{String, Tuple{String, String}}(\n    # Name => relative, default\n    \"base_path\" => (\"toml_path\", \"\"),\n    \"output_path\" => (\"base_path\", \"Output\")\n)\n\nThis dictionary maps (\"path_name\" => (\"relative_name\", \"default_path\")), where \"path_name\" is a human readable name for the path, \"relative_name\" is the name of the path which \"path_name\" is relative to, and \"default_path\" is the default value for the path (either absolute or relative). If \"path_name\" already exists inside toml[\"global\"], then that path will be used either as is (if an absolute path) or relative to \"relative_name\", otherwise the \"default_path\" will be used\n\n\n\n\n\n","category":"constant"},{"location":"setup/#InputFiles.SetupModule.setup_logger-Tuple{AbstractString, Bool}","page":"Setup functions","title":"InputFiles.SetupModule.setup_logger","text":"setup_logger(log_file::AbstractString, verbose::Bool)\n\nHelper function which sets up Logger formating and log level\n\nArguments\n\nlog_file::AbstractString: Path to log file\nverbose::Bool: Whether or not to display @debug calls\n\nSee also setup_logging! and setup_global!\n\n\n\n\n\n","category":"method"},{"location":"setup/#InputFiles.SetupModule.setup_logging!","page":"Setup functions","title":"InputFiles.SetupModule.setup_logging!","text":"setup_logging!(toml::Dict, output_path::String=\"output_path\"; log::Bool=true)\n\nHelper function which sets up log level, log files, etc... Assumes that setup_paths! has already been run on toml\n\nArguments\n\ntoml::Dict: The toml file we are modifying. This assumes that the toml already has a \"global\" key with value Dict{Any, Any}(\"toml_path\"=>\"/path/to/input\"), where\"toml_path\"is the path to the.toml` file\noutput_path::String: The \"path_name\" of the output directory where log files should be written. See default_paths for more details\ndo_log::Bool: Whether to actually log anything, useful when simply wanting to populate toml without changing anything on the disk\n\nSee also setup_global!\n\n\n\n\n\n","category":"function"},{"location":"setup/#InputFiles.SetupModule.setup_paths!-Tuple{Dict, OrderedCollections.OrderedDict{String, Tuple{String, String}}}","page":"Setup functions","title":"InputFiles.SetupModule.setup_paths!","text":"setup_paths!(toml::Dict, paths::OrderedDict{String, Tuple{String, String}}; mkdirs::Bool=true)\n\nHelper function which sets up paths, expanding relative paths and ensuring all interim directories exist\n\nArguments\n\ntoml::Dict: The toml file we are modifying. This assumes that the toml already has a \"global\" key with value Dict{Any, Any}(\"toml_path\"=>\"/path/to/input\"), where\"toml_path\"is the path to the.toml` file\npaths::OrderedDict{String, Tuple{String, String}}: Paths to expand. paths will be merged with the following default_paths, with paths taking preference. See default_paths for a the syntax of paths\nmkdirs::Bool: Whether to actually make the directories or not, useful when simply wanting to populate toml without changing anything on the disk\n\nSee also setup_global!\n\n\n\n\n\n","category":"method"}]
}
